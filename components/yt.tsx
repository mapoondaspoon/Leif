import { search } from "./lastfm"
import ytdl from "ytdl-core"
import { albumArt } from "./albumart"

export const recognize = (id: string) => {
    return new Promise(async (resolve, reject) => {
        let resp: Array<any> = []
        const info: any = (await ytdl.getInfo(id as any))
        let method = 0
        if (typeof info.response.engagementPanels[1].engagementPanelSectionListRenderer.content.structuredDescriptionContentRenderer === 'undefined') { method = 1 }
        if (method === 0) {
            if (!info.response.engagementPanels[1].engagementPanelSectionListRenderer.content.structuredDescriptionContentRenderer.items[1]) {
                method = 1
            }
        }
        switch (method) {
            case 0:
                const musicSection = info.response.engagementPanels[1].engagementPanelSectionListRenderer.content.structuredDescriptionContentRenderer.items[1].videoDescriptionMusicSectionRenderer
                const lockups = musicSection.carouselLockups
                for (const lockup of lockups) {
                    let inner: any = {}
                    const renderer = lockup.carouselLockupRenderer
                    if (typeof renderer.videoLockup !== 'undefined') {
                        const runs = renderer.videoLockup.compactVideoRenderer.title.runs
                        if (typeof runs !== 'undefined') {
                            inner["SONG"] = runs[0].text
                        }
                    }
                    for (const infoRow of renderer.infoRows) {
                        const title = infoRow.infoRowRenderer.title.simpleText
                        let input: any = typeof infoRow.infoRowRenderer.defaultMetadata !== 'undefined' ? infoRow.infoRowRenderer.defaultMetadata : infoRow.infoRowRenderer.expandedMetadata
                        switch (title) {
                            case "SONG":
                                input = typeof input.simpleText === 'undefined' ? input.runs[0].text : input.simpleText
                                break
                            case "ARTIST":
                                input = typeof input.simpleText === 'undefined' ? input.runs[0].text : input.simpleText
                                break
                            case "LICENSES":
                                input = input.simpleText
                                break
                            case "ALBUM":
                                input = input.simpleText
                                break
                            case "WRITERS":
                                input = input.simpleText
                                break
                            default:
                                input = ""
                                break
                        }
                        if (input) { inner[title] = input }
                    }
                    if (!inner["SONG"]) { inner["SONG"] = renderer.videoLockup.compactVideoRenderer.title.simpleText }
                    let art: any = info.videoDetails.thumbnails[info.videoDetails.thumbnails.length - 1].url
                    let url: any
                    url = await albumArt(inner["ARTIST"], typeof inner["ALBUM"] !== "undefined" ? inner["ALBUM"] : inner["SONG"])
                    if (typeof url === 'string') {
                        art = url
                    }
                    resp.push({ ...inner, "ALBUMART": art })
                }
                break
            case 1:
                let inner: any
                const prR = /\(([^)]+)\)|【([^】]+)】|\{([^\}]+)\}|\[([^\]]+)\]|"|“|”/g
                const videoTitle = info.videoDetails.title!.replace(prR, '')
                const videoAuthor = info.videoDetails.author.name
                const videoDescription = info.videoDetails.description
                let title: any
                let artist: any
                let data: any
                const getData = async () => {
                    const fetched: any = await search({ 'track': title, ...(artist ? { 'artist': artist } : {}) })
                    if (!fetched.lfm.results) { return false }
                    if (fetched.lfm.results[0]["opensearch:totalResults"][0] == 0) { return false }
                    return fetched
                }
                if (videoDescription?.startsWith("Provided to YouTube") && videoDescription?.endsWith("Auto-generated by YouTube.")) {
                    const descLines = videoDescription.split('<br>')
                    title = videoTitle
                    artist = videoAuthor?.split(" - ")[0]
                    data = await getData()
                } else {
                    title = `${videoTitle.replace(prR, '')}`
                    data = await getData()
                }
                if (!data) {
                    title = title.search("//") != -1 ? (`${videoAuthor} ${videoTitle.replace(prR, '')}`).split("//") : `${videoAuthor} ${videoTitle.replace(prR, '')}`
                    artist = ""
                    data = await getData()
                }
                if (title) {
                    if (!data) {
                        inner = { "ARTIST": info.videoDetails.author.name, "SONG": info.videoDetails.title }
                    } else {
                        const songData = data.lfm.results[0].trackmatches[0].track[0]
                        inner = { "ARTIST": songData.artist[0], "SONG": songData.name[0] }
                    }
                }
                let art: any = info.videoDetails.thumbnails[info.videoDetails.thumbnails.length - 1].url
                let url: any
                url = await albumArt(inner["ARTIST"], typeof inner["ALBUM"] !== "undefined" ? inner["ALBUM"] : inner["SONG"])
                if (typeof url === 'string') {
                    art = url
                }
                resp.push({ ...inner, "ALBUMART": art })
                break
        }
        return resolve(resp)
    })
}